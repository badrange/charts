# Main domain of the cluster.
clusterDomain: "silta.wdr.io"

ingress:
  # Options: traefik, gce, azure/application-gateway, etc.
  class: traefik
  redirect-https: true
  # Custom ingress annotations
  extraAnnotations: {}
  #  networking.gke.io/suppress-firewall-xpn-error: "true"
  
# https://github.com/wunderio/charts/blob/master/legacy_traefik/values.yaml
traefik:
  enabled: true
  externalTrafficPolicy: Local
  priorityClassName: "high-priority"
  image: eu.gcr.io/silta-images/traefik
  imageTag: 1.7.34-mod
  rbac:
    enabled: true
  replicas: 2
  ssl:
    enabled: true
    enforced: false
    generateTLS: true
    defaultCN: "*.silta.wdr.io"
    # Values from Mozilla SSL Configuration Generator
    # https://ssl-config.mozilla.org/#server=traefik&server-version=1.7.20&config=intermediate
    tlsMinVersion: "VersionTLS12"
    cipherSuites:
      - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
      - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
      - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
      - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
      - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
      - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305
  dashboard:
    enabled: false
    serviceType: "NodePort"
    #auth:
    #  basic: 
    #    # htpasswd -nb someuser somepass
    #    someuser: htpass_hash
  resources:
    requests:
      cpu: 50m
      memory: 128M
    limits:
      memory: 512M

ssl:
  enabled: true
  email: admin@example.com
  # Available issuers: letsencrypt-staging, letsencrypt, selfsigned, custom
  issuer: letsencrypt
  # Used when certificate issuer is "custom"
  # ca: ""
  # key: ""
  # crt: ""
  
# https://github.com/wunderio/charts/blob/master/csi-rclone/values.yaml
csi-rclone:
  enabled: false
  priorityClassName: "high-priority"
  # Use silta cluster gke credentials. This is used when remote type is set to "google cloud storage".
  useGkeAuth: false
  # Do not allow csi-rclone subchart to install default secret because we want to generate it ourselves.
  defaultParams: false
  storageClass:
    name: "silta-shared"
  # params:
  #   remote: "s3"
  #   remotePath: "projectname"
    
  #   # Minio as S3 provider
  #   s3-provider: "Minio"
  #   s3-endpoint: "http://silta-cluster-minio:9000"
  #   # Default credentials of minio chart https://github.com/minio/charts/blob/master/minio/values.yaml
  #   s3-access-key-id: "YOURACCESSKEY"
  #   s3-secret-access-key: "YOURSECRETKEY"

minio:
  enabled: false

# Splash page.
splash:
  resources:
    requests:
      cpu: 10m
      memory: 10M


# SSH Jumphost settings
gitAuth:
  enabled: true
  port: 22
  keyserver:
    enabled: true
    url: ''
    username: ''
    password: ''
  authorizedKeys: []
  scope: ''
  outsideCollaborators: true
  allowedIps: []
  replicas: 1
  persistence:
    # storageClassName: silta-shared
    accessMode: ReadWriteOnce
    size: 50M
  # Kubernetes resource allocation.
  resources: {}
  # The static IP to be used for the exposed endpoint.
  loadBalancerIP: null
  externalTrafficPolicy: Local

# SSH keyserver (keys.[clusterDomain])
sshKeyServer:
  enabled: true
  gitauthApiToken: ''
  apiUsername: ''
  apiPassword: ''
  replicas: 1
  resources: {}

# Deployment remover
deploymentRemover:
  enabled: true
  replicas: 2
  image: wunderio/silta-deployment-remover
  imageTag: v0.1
  # Github webhooks secret
  webhooksSecret: ''
  # Kubernetes resource allocation.
  resources: {}

# GKE Cluster settings
gke:
  keyJSON: ''
  projectName: '' 
  computeZone: ''
  clusterName: ''

# Redis DB for remover queue
# https://github.com/helm/charts/tree/master/stable/redis
redis:
  password: ''
  cluster:
    enabled: false
    slaveCount: 0

# Percona XtraDB Cluster for replicated database support
# https://github.com/percona/percona-helm-charts/tree/main/charts/pxc-operator
pxc-operator:
  enabled: false
  watchAllNamespaces: true

# Cert manager moved to subchart, see installation instructions.
# Installs v0.10.1 when explicitly enabled, but it 
# does not work on kubernetes 1.20+
cert-manager:
  enabled: false

silta-downscaler:
  enabled: false
  image: wunderio/silta-downscaler
  imageTag: "v0.1"
  # A cron schedule to determine when applications will be downscaled.
  schedule: "0 4,18 * * *"
  # How long should releases be kept by default.
  defaultMinAge: 1d
  # How long should releases with matching names be kept. The last matching rule takes effect.
  releaseMinAge:
    "^production": 10y
    "^(master|main|stage|staging)": 4w
    "^dependabot": 1h
  resources:
    requests:
      cpu: 10m
      memory: 50Mi

# https://github.com/wunderio/charts/blob/master/silta-proxy
silta-proxy:
  enabled: false

instana-agent:
  enabled: false

nfs-subdir-external-provisioner:
  enabled: false
  nfs:
    path: /main_share
  storageClass:
    name: nfs-shared
    pathPattern: "${.PVC.namespace}/${.PVC.annotations.storage.silta/storage-path}"
    onDelete: delete

# This should be replaced when an actual sidecar implementation is available. 
# https://github.com/kubernetes/enhancements/issues/753#issuecomment-713471597
k8sControllerSidecars:
  enabled: true
  replicaCount: 1
  image:
    repository: eu.gcr.io/silta-images/silta-k8s-controller-sidecars
    tag: latest
    pullPolicy: IfNotPresent
  resources:
    requests:
     cpu: 100m
     memory: 128Mi
    limits:
      cpu: "200m"
      memory: "256Mi"

# https://github.com/twuni/docker-registry.helm
docker-registry:
  enabled: false
  image:
    repository: distribution/distribution  
    tag: 2.8.1
  service:
    port: 80
  persistence:
    enabled: true
    size: 10Gi
  resources:  
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 100m
      memory: 192Mi
  secrets:
    # generate user:passwordhash using "htpasswd -Bbn user password" and keep it safe!
    # Note: allows multiple sets of credentials, use one per line
    htpasswd: |
      broken:auth

